#!/usr/bin/env gsi
; vim:set ft=scheme:

;; ---------------------------------------------------------------------------
;; FINDING FILES TO CHECK
;; ---------------------------------------------------------------------------

(define (files-in-directory dir)
  (define (add-path file)
    (string-append dir "/" file))
  (let* ((directory-handle (open-directory `(path: ,dir ignore-hidden: dot-and-dot-dot)))
	 (files (read-all directory-handle)))
    (close-input-port directory-handle)
    (map add-path files)))

(define (filter predicate list)
  (define results '())
  (for-each
    (lambda (element)
      (if (predicate element)
	(set! results (cons element results))))
    list)
  (reverse results))

(define (last-index-of char str)
  (let loop ((index (- (string-length str) 1)))
    (cond
      ((< index 0)
       #f)
      ((char=? char (string-ref str index))
       index)
      (else
       (loop (- index 1))))))

(define (file-extension filename)
  (let ((dot-index (last-index-of #\. filename))
	(slash-index (last-index-of #\/ filename)))
    (cond
      ((or (not dot-index)
	   (and dot-index
		slash-index
		(> slash-index dot-index)))
       "")
      (else
       (substring filename dot-index (string-length filename))))))

(define (scheme-file? filename)
  (member (file-extension filename) '(".scm" ".ss")))

(define (scheme-files)
  (filter scheme-file? (files-in-directory ".")))

;; ---------------------------------------------------------------------------
;; CHECKING FILES
;; ---------------------------------------------------------------------------

(define (check1-path)
  (let* ((check-path (this-source-file))
	 (slash-index (last-index-of #\/ check-path)))
    (if slash-index
      (string-append
        (substring check-path 0 (+ 1 slash-index))
        "check1")
      "check1")))

(define system ##shell-command)

(define (check1 path)
  (let* ((command (string-append
		    (check1-path)
		    " \""
		    path
		    "\""))
	 (exit-status (system command)))
    (= 0 exit-status)))

(for-each check1 (scheme-files))

