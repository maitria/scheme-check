#!/usr/bin/env gsi
; vim:set ft=scheme:

;; ---------------------------------------------------------------------------
;; EXPECTATIONS
;; ---------------------------------------------------------------------------

(define *expectations* '())

(define (add-expectation expectation)
  (set! *expectations* (append *expectations* (list expectation))))

(define (run-expectations)
  (for-each expect:run-single *expectations*)
  (newline))

(define (expect:run-single spec)
  (define (reporter kind extra)
    (case kind
      ((pass)
       (display "."))
      ((fail)
       (display "F"))
      ((error)
       (display "E"))))

  (let* ((source-locat (car spec))
	 (check-proc (cdr spec)))
    (check-proc reporter)))

;; ---------------------------------------------------------------------------
;; FINDING FILES TO CHECK
;; ---------------------------------------------------------------------------

(define (files-in-directory dir)
  (define (add-path file)
    (string-append dir "/" file))
  (let* ((directory-handle (open-directory `(path: ,dir ignore-hidden: dot-and-dot-dot)))
	 (files (read-all directory-handle)))
    (close-input-port directory-handle)
    (map add-path files)))

(define (filter predicate list)
  (define results '())
  (for-each
    (lambda (element)
      (if (predicate element)
	(set! results (cons element results))))
    list)
  (reverse results))

(define (file-extension filename)
  (define (last-index-of char str)
    (let loop ((index (- (string-length str) 1)))
      (cond
	((< index 0)
	 #f)
	((char=? char (string-ref str index))
	 index)
	(else
	 (loop (- index 1))))))

  (let ((dot-index (last-index-of #\. filename))
	(slash-index (last-index-of #\/ filename)))
    (cond
      ((or (not dot-index)
	   (and dot-index
		slash-index
		(> slash-index dot-index)))
       "")
      (else
       (substring filename dot-index (string-length filename))))))

(define (scheme-file? filename)
  (member (file-extension filename) '(".scm" ".ss")))

(define (scheme-files)
  (filter scheme-file? (files-in-directory ".")))

;; ---------------------------------------------------------------------------
;; CHECKING A FILE
;; ---------------------------------------------------------------------------


(write (scheme-files))
