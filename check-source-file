#!/usr/bin/env gsi
; vim:set ft=scheme sts=2 sw=2 et:

(define first-parameter (cadr (command-line)))

(define check-source-file:*source-file* first-parameter) 
(define check-source-file:*ok* #t)

(define (ansi text-color)
  (string-append
    (list->string
      (list
        (integer->char 27)
        #\[))
    text-color
    "m"))

(define *bold* (ansi "1"))
(define *normal* (ansi "0"))

(display *bold*)
(display check-source-file:*source-file*)
(display ": ")
(display *normal*)

(load check-source-file:*source-file*)

(define (check-source-file:expectations)
  (define line-number 1)
  (define column-number 0)
  (define expectations '())
  (define this-expectation #f)

  (with-input-from-file check-source-file:*source-file*
    (lambda ()
      (let parse-loop ((c (read-char))
                       (state-stack '(top)))
        (define (next)
          (parse-loop (read-char) state-stack))
        (define (next/push state)
          (parse-loop (read-char) (cons state state-stack)))
        (define (next/pop)
          (parse-loop (read-char) (cdr state-stack)))
        (define (next/replace state)
          (parse-loop (read-char) (cons state (cdr state-stack))))
        (define (in-state . states)
          (memq (car state-stack) states))
        (define (save)
          (set! expectations (cons (list->string (reverse this-expectation)) expectations))
          (set! this-expectation #f))

        (cond
          ((eof-object? c)
           (if (in-state 'expectation)
             (save)))

          ;; Lists
          ((and (in-state 'top)
                (char=? #\( c))
           (next/push 'list))

          ((and (in-state 'list)
                (char=? #\) c))
           (next/pop))

          ;; String literals
          ((and (in-state 'top 'list)
                (char=? #\" c))
           (next/push 'string))
          
          ((and (in-state 'string)
                (char=? #\\ c))
           (read-char)
           (next))

          ((and (in-state 'string)
                (char=? #\" c))
           (next/pop))

          ;; Comments / expectations
          ((and (in-state 'top 'list)
                (char=? #\; c))
           (next/push 'maybe-expectation))

          ((in-state 'maybe-expectation)
           (cond
             ((char=? #\( c)
              (set! this-expectation '(#\())
              (next/replace 'expectation))
             ((char=? #\newline c)
              (next/pop))
             (else
              (next/replace 'comment))))

          ((and (in-state 'comment)
                (char=? #\newline c))
           (next/pop))

          ((and (in-state 'expectation)
                (char=? #\newline c))
           (save)
           (next/pop))

          ((in-state 'expectation)
           (set! this-expectation (cons c this-expectation))
           (next))

          (else
           (next))))))

  (reverse expectations))

(for-each
  (lambda (expectation)
    (with-exception-catcher
      (lambda (e) 
        (set! check-source-file:*ok* #f)
        (display (ansi "31"))
        (display "E")
        (display (ansi "0")))
      (lambda ()
        (if (eval (with-input-from-string expectation read))
          (begin
            (display (ansi "32"))
            (display ".")
            (display (ansi "0")))
          (begin
            (set! check-source-file:*ok* #f)
            (display (ansi "31"))
            (display "F")
            (display (ansi "0")))))))
  (check-source-file:expectations))

(if check-source-file:*ok*
  (begin
    (display (ansi "1"))
    (display " OK")
    (display (ansi "0")))
  (begin
    (display (ansi "1"))
    (display " FAILED")
    (display (ansi "0"))))
(newline)
(exit (if check-source-file:*ok*
        0
        1))
